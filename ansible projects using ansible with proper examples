Ansible is a powerful automation tool that can be used for a variety of tasks, including configuration management, application deployment, orchestration, and provisioning. Below are a few examples of different types of Ansible projects, along with sample playbooks to illustrate how you can use Ansible in real-world scenarios.

1. Web Server Setup
This project involves setting up a web server (like Apache or Nginx) on a remote machine.

Example Playbook: setup_web_server.yml
yaml

Verify

Open In Editor
Edit
Copy code
---
- name: Set up a web server
  hosts: webservers
  become: yes
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present
        update_cache: yes

    - name: Start and enable Apache service
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Copy the HTML file
      copy:
        src: /path/to/local/index.html
        dest: /var/www/html/index.html
2. Database Setup
This project involves installing and configuring a database server, such as MySQL.

Example Playbook: setup_mysql.yml
yaml

Verify

Open In Editor
Edit
Copy code
---
- name: Set up MySQL database
  hosts: dbservers
  become: yes
  vars:
    mysql_root_password: "your_root_password"
    mysql_database: "my_database"
    mysql_user: "my_user"
    mysql_password: "my_password"

  tasks:
    - name: Install MySQL server
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Ensure MySQL is running
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Set MySQL root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        state: present

    - name: Create a new database
      mysql_db:
        name: "{{ mysql_database }}"
        state: present

    - name: Create a new MySQL user
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_database }}.*:ALL"
        state: present
3. Application Deployment
This project focuses on deploying a web application to a server.

Example Playbook: deploy_app.yml
yaml

Verify

Open In Editor
Edit
Copy code
---
- name: Deploy a web application
  hosts: appservers
  become: yes
  vars:
    app_repo: "https://github.com/yourusername/yourapp.git"
    app_path: "/var/www/yourapp"

  tasks:
    - name: Install Git
      apt:
        name: git
        state: present

    - name: Clone the application repository
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_path }}"
        version: master

    - name: Install dependencies
      command: npm install
      args:
        chdir: "{{ app_path }}"

    - name: Start the application
      command: npm start
      args:
        chdir: "{{ app_path }}"
      async: 10
      poll: 0
4. User Management
This project involves managing user accounts on a set of servers.

Example Playbook: manage_users.yml
yaml

Verify

Open In Editor
Edit
Copy code
---
- name: Manage users on servers
  hosts: all
  become: yes
  vars:
    users:
      - name: alice
        state: present
      - name: bob
        state: absent

  tasks:
    - name: Ensure users are present/absent
      user:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      loop: "{{ users }}"
5. Configuration Management
This project focuses on managing configuration files across multiple servers.

Example Playbook: manage_config.yml
yaml

Verify

Open In Editor
Edit
Copy code
---
- name: Manage configuration files
  hosts: all
  become: yes
  tasks:
    - name: Copy configuration file
      template:
        src: /path/to/template.conf.j2
        dest: /etc/myapp/config.conf
      notify: restart myapp

  handlers:
    - name: restart myapp
      service:
        name: myapp
        state: restarted
Conclusion
These examples provide a starting point for using Ansible in various scenarios. You can expand on these playbooks by adding more tasks, roles, and variables as needed. Ansible also supports dynamic inventories, which can help you manage large environments more efficiently.

For production environments, consider using Ansible roles to organize your playbooks and tasks better, making them reusable and easier to manage.
